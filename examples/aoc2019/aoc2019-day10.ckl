# advent of code day 10
# https://adventofcode.com/2019/day/10

require io import [read_file, println, printf];
require math import [atan2, sqrt, PI];
require lists import [map_list, filter, flatten, grouped, unique];

# Part 1

def asteroids = read_file("aoc2019-day10-input.txt") !>
                lines() !>
                enumerate() !>
                map_list(fn(item) do
                    def row = item[0];
                    item[1] !> split("") !> enumerate() !> filter(fn(item) item[1] == '#') !> map_list(fn(col) do
                        <<<y => row, x => col[0]>>>
                    end);
                end) !>
                flatten() !>
                filter(fn(item) item != []);

def asteroids_visible_at(x, y) do
    asteroids !>
    filter(fn(a) not (a->x == x and a->y == y)) !>
    map_list(fn(a) atan2(a->y - y, a->x - x)) !>
    sorted() !>
    unique() !>
    length()
end;

max([asteroids_visible_at(a->x, a->y) for a in asteroids]) !>
printf(fmt = "part1: {0}\n");

# Part 2

def [x, y] = max([[a->x, a->y, asteroids_visible_at(a->x, a->y)] for a in asteroids], key = fn(item) item[2]);

def distance(x0, y0, x1, y1) sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));

def asteroids_from(x, y) do
    asteroids !>
    filter(fn(a) not (a->x == x and a->y == y)) !>
    map_list(fn(a) [(atan2(a->y - y, a->x - x) + 2 * PI) % (2 * PI), distance(x, y, a->x, a->y), a->x, a->y]) !>
    sorted(key = fn(item) item[0]) !>
    grouped(key = fn(item) item[0]) !>
    map_list(fn(group) do
        [group[0][0], sorted(map_list(group, fn(item) item !> sublist(1)), key = fn(item) item[0])]
    end)
end;

def asteroid_list = asteroids_from(x, y);

def idx = find(asteroid_list, 3*PI/2, key = fn(x) x[0]);

for i in range(199) do
    def ray = asteroid_list[idx];
    #println((i+1) + ": " + ray[1]);
    delete_at(ray[1], 0);
    if length(ray[1]) == 0 then do 
        delete_at(asteroid_list, idx);
        if idx == length(asteroid_list) then idx = 0;
        if length(asteroid_list) == 0 then error("all asteroids pulverized");
    end else do
        idx += 1;
        if idx == length(asteroid_list) then idx = 0;
    end;
end;

def [rx, ry] = asteroid_list[idx][1][0] !> sublist(1);

println("part2: " + (rx * 100 + ry));
